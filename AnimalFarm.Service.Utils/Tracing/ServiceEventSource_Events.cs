
//--------------------------------------------------------------------------------------------------------------
// <auto-generated> 
// This code was automatically generated by ET4W (https://github.com/ohadschn/ET4W).
// Changes to this file might cause incorrect behavior and will be lost if the code is regenerated. 
// If you wish to customize the code below, please extend the generated partial events class in a separate file.
//
// Generated from:			C:\Users\alexe\onedrive\documents\visual studio 2017\Projects\AnimalFarm\AnimalFarm.Service.Utils\Tracing\events.json
// Generation time:			Mon, 18 Jun 2018 20:14:27 GMT
//
// </auto-generated> 
//--------------------------------------------------------------------------------------------------------------

using System;
using System.Diagnostics.Tracing;

namespace AnimalFarm.Service.Utils.Tracing
{	
	//wrapper event class
	public partial class ServiceEvents
	{	
		//custom type converters (if exist)

		//common parameter generators (if exist)
		
		//ctor
		public ServiceEvents()
		{
			//converter assignments (if exist)

			//generator assignments (if exist)
		}

		//wrapper event methods

		public void ServiceRequestStarted(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string requestPath)
		{
			ServiceEventSource.Current.ServiceRequestStarted(serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, requestPath);
		}
		public void ServiceRequestStopped(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string requestPath)
		{
			ServiceEventSource.Current.ServiceRequestStopped(serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, requestPath);
		}
		public void ServiceRequestFailed(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string requestPath, string exceptionMessage, string stackTrace)
		{
			ServiceEventSource.Current.ServiceRequestFailed(serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, requestPath, exceptionMessage, stackTrace);
		}
		public void OperationStarted(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string operationRunId, string operationName)
		{
			ServiceEventSource.Current.OperationStarted(serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, operationRunId, operationName);
		}
		public void OperationStopped(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string operationRunId)
		{
			ServiceEventSource.Current.OperationStopped(serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, operationRunId);
		}
		public void OperationTimedOut(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string operationRunId)
		{
			ServiceEventSource.Current.OperationTimedOut(serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, operationRunId);
		}
		public void OperationFailed(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string operationRunId, string exceptionMessage, string stackTrace)
		{
			ServiceEventSource.Current.OperationFailed(serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, operationRunId, exceptionMessage, stackTrace);
		}
		public void OperationRetried(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string operationRunId, int retryAttempt, int totalAttempts)
		{
			ServiceEventSource.Current.OperationRetried(serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, operationRunId, retryAttempt, totalAttempts);
		}
	}

	//event source
	[EventSource(Name = "AnimalFarm")]
	public sealed partial class ServiceEventSource : System.Diagnostics.Tracing.EventSource
	{
	    private static readonly Lazy<ServiceEventSource> _current = new Lazy<ServiceEventSource>(() => new ServiceEventSource(), true);

        public static ServiceEventSource Current => _current.Value;

		//event keywords
		public sealed class Keywords
		{
			private Keywords() {}
			public const EventKeywords Exception = (EventKeywords) 1;
			public const EventKeywords ServiceInitialization = (EventKeywords) 2;
			public const EventKeywords Request = (EventKeywords) 4;
			public const EventKeywords Operation = (EventKeywords) 8;
		}

		//event tasks
		public sealed class Tasks
		{
			private Tasks() {}
		}

		//ETW event methods

		[Event(5
			,Keywords=Keywords.Request
			,Level=EventLevel.Informational
			,Message="Service request '{7}' by user '{8}' to '{0}'/'{9}' started"
		)]
		public void ServiceRequestStarted(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string requestPath)
		{
			WriteEvent(5, serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, requestPath);
		}
		[Event(6
			,Keywords=Keywords.Request
			,Level=EventLevel.Informational
			,Message="Service request '{7}' by user '{8}' to '{0}'/'{9}' stoped"
		)]
		public void ServiceRequestStopped(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string requestPath)
		{
			WriteEvent(6, serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, requestPath);
		}
		[Event(7
			,Keywords=Keywords.Request
			,Level=EventLevel.Error
			,Message="Service request '{7}' by user '{8}' to '{0}'/'{9}' failed with exception '{10}'"
		)]
		public void ServiceRequestFailed(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string requestPath, string exceptionMessage, string stackTrace)
		{
			WriteEvent(7, serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, requestPath, exceptionMessage, stackTrace);
		}
		[Event(8
			,Keywords=Keywords.Operation
			,Level=EventLevel.Error
			,Message="Operation '{9}' ('{10}') started in the scope of request '{7}'"
		)]
		public void OperationStarted(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string operationRunId, string operationName)
		{
			WriteEvent(8, serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, operationRunId, operationName);
		}
		[Event(9
			,Keywords=Keywords.Operation
			,Level=EventLevel.Error
			,Message="Operation '{9}' stopped in the scope of request '{7}'"
		)]
		public void OperationStopped(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string operationRunId)
		{
			WriteEvent(9, serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, operationRunId);
		}
		[Event(10
			,Keywords=Keywords.Operation
			,Level=EventLevel.Error
			,Message="Operation '{9}' timed out"
		)]
		public void OperationTimedOut(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string operationRunId)
		{
			WriteEvent(10, serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, operationRunId);
		}
		[Event(11
			,Keywords=Keywords.Operation
			,Level=EventLevel.Error
			,Message="Operation '{9}' failed with exception '{10}'"
		)]
		public void OperationFailed(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string operationRunId, string exceptionMessage, string stackTrace)
		{
			WriteEvent(11, serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, operationRunId, exceptionMessage, stackTrace);
		}
		[Event(12
			,Keywords=Keywords.Operation
			,Level=EventLevel.Error
			,Message="Operation '{9}' is being retried (attempt {10} of {11})"
		)]
		public void OperationRetried(string serviceName, string serviceTypeName, long replicaOrInstanceId, Guid partitionId, string applicationName, string applicationTypeName, string nodeName, string requestId, string userId, string operationRunId, int retryAttempt, int totalAttempts)
		{
			WriteEvent(12, serviceName, serviceTypeName, replicaOrInstanceId, partitionId, applicationName, applicationTypeName, nodeName, requestId, userId, operationRunId, retryAttempt, totalAttempts);
		}
	}
}
